// Code generated by go-swagger; DO NOT EDIT.

package records

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// ListRecordsURL generates an URL for the list records operation
type ListRecordsURL struct {
	Limit               *int64
	Offset              *int64
	OrderBy             *string
	OrderByDesc         *bool
	OrderByProperty     *string
	OrderByPropertyDesc *bool
	Parent              *string
	Prefix              *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ListRecordsURL) WithBasePath(bp string) *ListRecordsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ListRecordsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *ListRecordsURL) Build() (*url.URL, error) {
	var result url.URL

	var _path = "/records"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api"
	}
	result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var limit string
	if o.Limit != nil {
		limit = swag.FormatInt64(*o.Limit)
	}
	if limit != "" {
		qs.Set("limit", limit)
	}

	var offset string
	if o.Offset != nil {
		offset = swag.FormatInt64(*o.Offset)
	}
	if offset != "" {
		qs.Set("offset", offset)
	}

	var orderBy string
	if o.OrderBy != nil {
		orderBy = *o.OrderBy
	}
	if orderBy != "" {
		qs.Set("orderBy", orderBy)
	}

	var orderByDesc string
	if o.OrderByDesc != nil {
		orderByDesc = swag.FormatBool(*o.OrderByDesc)
	}
	if orderByDesc != "" {
		qs.Set("orderByDesc", orderByDesc)
	}

	var orderByProperty string
	if o.OrderByProperty != nil {
		orderByProperty = *o.OrderByProperty
	}
	if orderByProperty != "" {
		qs.Set("orderByProperty", orderByProperty)
	}

	var orderByPropertyDesc string
	if o.OrderByPropertyDesc != nil {
		orderByPropertyDesc = swag.FormatBool(*o.OrderByPropertyDesc)
	}
	if orderByPropertyDesc != "" {
		qs.Set("orderByPropertyDesc", orderByPropertyDesc)
	}

	var parent string
	if o.Parent != nil {
		parent = *o.Parent
	}
	if parent != "" {
		qs.Set("parent", parent)
	}

	var prefix string
	if o.Prefix != nil {
		prefix = *o.Prefix
	}
	if prefix != "" {
		qs.Set("prefix", prefix)
	}

	result.RawQuery = qs.Encode()

	return &result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *ListRecordsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *ListRecordsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *ListRecordsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on ListRecordsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on ListRecordsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *ListRecordsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
