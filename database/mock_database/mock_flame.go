// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	gomock "github.com/golang/mock/gomock"
	database "github.com/myzie/flamedb/database"
	reflect "reflect"
)

// MockFlame is a mock of Flame interface
type MockFlame struct {
	ctrl     *gomock.Controller
	recorder *MockFlameMockRecorder
}

// MockFlameMockRecorder is the mock recorder for MockFlame
type MockFlameMockRecorder struct {
	mock *MockFlame
}

// NewMockFlame creates a new mock instance
func NewMockFlame(ctrl *gomock.Controller) *MockFlame {
	mock := &MockFlame{ctrl: ctrl}
	mock.recorder = &MockFlameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlame) EXPECT() *MockFlameMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockFlame) Get(arg0 database.Key) (*database.Record, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*database.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFlameMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFlame)(nil).Get), arg0)
}

// Save mocks base method
func (m *MockFlame) Save(arg0 *database.Record) error {
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockFlameMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFlame)(nil).Save), arg0)
}

// Delete mocks base method
func (m *MockFlame) Delete(arg0 *database.Record) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFlameMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFlame)(nil).Delete), arg0)
}

// List mocks base method
func (m *MockFlame) List(arg0 database.Query) ([]*database.Record, error) {
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*database.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockFlameMockRecorder) List(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFlame)(nil).List), arg0)
}

// GetIndexes mocks base method
func (m *MockFlame) GetIndexes() ([]database.Index, error) {
	ret := m.ctrl.Call(m, "GetIndexes")
	ret0, _ := ret[0].([]database.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndexes indicates an expected call of GetIndexes
func (mr *MockFlameMockRecorder) GetIndexes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexes", reflect.TypeOf((*MockFlame)(nil).GetIndexes))
}

// CreateIndex mocks base method
func (m *MockFlame) CreateIndex(arg0 database.Index) error {
	ret := m.ctrl.Call(m, "CreateIndex", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex
func (mr *MockFlameMockRecorder) CreateIndex(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockFlame)(nil).CreateIndex), arg0)
}

// DeleteIndex mocks base method
func (m *MockFlame) DeleteIndex(arg0 database.Index) error {
	ret := m.ctrl.Call(m, "DeleteIndex", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndex indicates an expected call of DeleteIndex
func (mr *MockFlameMockRecorder) DeleteIndex(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockFlame)(nil).DeleteIndex), arg0)
}

// HasIndex mocks base method
func (m *MockFlame) HasIndex(arg0 database.Index) (bool, error) {
	ret := m.ctrl.Call(m, "HasIndex", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasIndex indicates an expected call of HasIndex
func (mr *MockFlameMockRecorder) HasIndex(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasIndex", reflect.TypeOf((*MockFlame)(nil).HasIndex), arg0)
}

// DropTable mocks base method
func (m *MockFlame) DropTable() error {
	ret := m.ctrl.Call(m, "DropTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropTable indicates an expected call of DropTable
func (mr *MockFlameMockRecorder) DropTable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockFlame)(nil).DropTable))
}

// Migrate mocks base method
func (m *MockFlame) Migrate() error {
	ret := m.ctrl.Call(m, "Migrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate
func (mr *MockFlameMockRecorder) Migrate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockFlame)(nil).Migrate))
}
